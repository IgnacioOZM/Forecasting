## Pregunta 1 ----
# Let us begin with the basics. Create a vector with values 2002, 2004, 2006,
# 2008 using c and seq functions.
a <- c(2002,2004,2006,2008)
b <- seq(2002,2008,by=2)
## Pregunta 2 ----
# Use function length to get the size of the vector.
size <- length(a)
## Pregunta 3 ----
# Try the different methods for selecting the elements of the vector.
a[1]
a[-2]
a[2:4]
a[-(2:3)]
a[c(1,4)]
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest) #contains coeftest function
## Set working directory -------------------------------------------------------------------------
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
rm(list = ls())
cat("\014")
## Load dataset -------------------------------------------------------------------------------------------------------
fdata <- read_excel("ARMA_series.xls")
# Convert to time series object
fdata_ts <- ts(fdata)
# index to select a time series
y <- fdata_ts[,2]
## Identification and fitting frocess -------------------------------------------------------------------------------------------------------
# ACF and PACF of the time series -> identify significant lags and order
ggtsdisplay(y,lag.max = 25)
# Fit model with estimated orderr=c(AR,0,MA)
arima.fit <- Arima(y, order=c(0,0,0), include.mean = TRUE)
summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Fit model with estimated orderr=c(AR,0,MA)
arima.fit <- Arima(y, order=c(0,0,1), include.mean = TRUE)
summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Fit model with estimated orderr=c(AR,0,MA)
arima.fit <- Arima(y, order=c(0,0,1), include.mean = FALSE)
summary(arima.fit) # summary of training errors and estimated coefficients
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=20)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit),lag.max = 25)
# Check fitted forecast
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
#Perform future forecast
y_est <- forecast(arima.fit, h=5)
autoplot(y_est)
#Perform future forecast
y_est <- forecast(arima.fit, h=50)
autoplot(y_est)
#Perform future forecast
y_est <- forecast(arima.fit, h=5)
autoplot(y_est)
## Simulate ARMA time series -------------------------------------------------------------------------------------------------------
sim_ts <- arima.sim(n = 250,
list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
source('C:/Users/Ignacio/OneDrive - Universidad Pontificia Comillas/ICAI/1º de Master/Machine learning/Forecasting/Practica_2_ARIMA/LabPractice_4_2_ARMA.r', echo=TRUE)
# Check residuals
CheckResiduals.ICAI(arima.fit, bins = 100, lag=20)
## Identification and fitting frocess -------------------------------------------------------------------------------------------------------
# ACF and PACF of the time series -> identify significant lags and order
ggtsdisplay(y,lag.max = 25)
# Fit model with estimated order=c(AR,0,MA)
arima.fit <- Arima(y, order=c(0,0,1), include.mean = FALSE)
summary(arima.fit) # summary of training errors and estimated coefficients
# Si pvalor menor de 0.05 el coeficiente es muy significativo.
coeftest(arima.fit) # statistical significance of estimated coefficients
autoplot(arima.fit) # root plot
# Check residuals
# Si pvalor es mayor de 0.05 damos por bueno el modelo porque no podemos rechazar la hipótesis de ruido blanco.
CheckResiduals.ICAI(arima.fit, bins = 100, lag=20)
autoplot(arima.fit) # root plot
# Check residuals
# Si pvalor es mayor de 0.05 damos por bueno el modelo porque no podemos rechazar la hipótesis de ruido blanco.
CheckResiduals.ICAI(arima.fit, bins = 100, lag=20)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit),lag.max = 25)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit),lag.max = 25)
# Check residuals
# Si pvalor es mayor de 0.05 damos por bueno el modelo porque no podemos rechazar la hipótesis de ruido blanco.
CheckResiduals.ICAI(arima.fit, bins = 100, lag=20)
# If residuals are not white noise, change order of ARMA
ggtsdisplay(residuals(arima.fit),lag.max = 25)
# Check fitted forecast
autoplot(y, series = "Real")+
forecast::autolayer(arima.fit$fitted, series = "Fitted")
library(MLTools)
library(fpp2)
library(ggplot2)
library(readxl)
library(lmtest)  #contains coeftest function
library(tseries) #contains adf.test function
## Set working directory ---------------------------------------------------------------------------------------------
x <-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(x)
rm(list = ls())
cat("\014")
## Load dataset -------------------------------------------------------------------------------------------------------
fdata <- read_excel("ARIMA_II.xls")
# Convert to time series object
fdata_ts <- ts(fdata)
# index to select a time series
y <- fdata_ts[,2]
## Identification and fitting frocess -------------------------------------------------------------------------------------------------------
autoplot(y)
# Box-Cox transformation
Lambda <- BoxCox.lambda.plot(y,10)
# Lambda <- BoxCox.lambda(y) #other option
z <- BoxCox(y,Lambda)
autoplot(z)
# Differentiation: if the ACF decreases very slowly -> needs differenciation
ggtsdisplay(z,lag.max = 25)
# Alternative test
adf.test(z, alternative = "stationary") # Si el pvalor es mayor de 0.05 significa que tu serie no es estacionaria. Diferencias
